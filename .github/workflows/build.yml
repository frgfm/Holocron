name: build

on:
  push:
    branches: main
  pull_request:
    branches: main

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.5.13"

jobs:
  package:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: [3.9, '3.10', 3.11, 3.12]
        exclude:
          - os: macos-latest
            python: '3.10'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          architecture: x64
      - uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
      - name: Install package
        run: |
          make install
          python -c "import holocron; print(holocron.__version__)"

  pypi:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64
      - uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
      - name: Build package
        run: |
          uv pip install --system setuptools wheel twine --upgrade
          python setup.py sdist bdist_wheel
          twine check dist/*

  conda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        shell: bash -el {0}
        run: conda install -y conda-build conda-verify
      - name: Build conda
        shell: bash -el {0}
        run: |
          python setup.py sdist
          mkdir conda-dist
          conda env list
          conda-build .conda/ -c pytorch -c fastai -c conda-forge --output-folder conda-dist
          ls -l conda-dist/noarch/*tar.bz2

  api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
      - name: Build, run & check docker
        run: make start-api

  demo:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64
      - uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
      - name: Install & run demo app
        run: |
          make install-demo
          screen -dm make run-demo
          sleep 20 && nc -vz localhost 8080

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          architecture: x64
      - uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
      - name: Build documentation
        run: |
          make install-docs
          make docs-full
      - name: Documentation sanity check
        run: test -e docs/build/index.html || exit
